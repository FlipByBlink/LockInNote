import WatchConnectivity
import WidgetKit

class ðŸ“±AppModel: NSObject, ObservableObject, WKApplicationDelegate {
    ========
    private var â“£asks: Set<WKRefreshBackgroundTask> = []
    ========
}

extension ðŸ“±AppModel: WKApplicationDelegate {
    func applicationDidFinishLaunching() {
        if WCSession.isSupported() {
            WCSession.default.delegate = self
            WCSession.default.activate()
        }
    }
    func handle(_ backgroundTasks: Set<WKRefreshBackgroundTask>) {
        for â“£ask in backgroundTasks {
            if let â“¦cTask = â“£ask as? WKWatchConnectivityRefreshBackgroundTask {
                self.â“£asks.insert(â“¦cTask)
            } else {
                â“£ask.setTaskCompletedWithSnapshot(false)
            }
        }
    }
}

extension ðŸ“±AppModel: WCSessionDelegate {
    //Required
    func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
        ðŸ’¾ICloud.synchronize()
    }
    //Optional
    func session(_ session: WCSession, didReceiveApplicationContext applicationContext: [String : Any]) {
        self.fetchFromIPhone()
    }
}

extension ðŸ“±AppModel {
    func pushToIPhone() {
        try? WCSession.default.updateApplicationContext(["pushedFromAppleWatch": Date.now])
    }
    func fetchFromIPhone() {
        Task { @MainActor in
            ðŸ’¾ICloud.synchronize()
            WidgetCenter.shared.reloadAllTimelines()
            self.â“£asks.forEach { $0.setTaskCompletedWithSnapshot(false) }
            self.â“£asks.removeAll()
        }
    }
}

struct PushToIPhone: ViewModifier {
    @EnvironmentObject var app: ðŸ“±AppModel
    @Environment(\.scenePhase) var scenePhase
    func body(content: Content) -> some View {
        content
            .onChange(of: scenePhase) {
                if $0 == .background { self.app.pushToIPhone() }
            }
    }
}
