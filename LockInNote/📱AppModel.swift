import SwiftUI
import WidgetKit

class ðŸ“±AppModel: ObservableObject {
    @Published var ðŸŽ›rectangularData = ðŸŽ›RectangularDataModel()
    @Published var ðŸŽ›circularData = ðŸŽ›CircularDataModel()
    @Published var ðŸŽ›inlineData = ðŸŽ›InlineDataModel()
    
    func ðŸ’¾saveDataAndReloadWidget() {
        do {
            let â“¤d = UserDefaults(suiteName: ðŸ†”AppGroupID)
            var â““ata = try JSONEncoder().encode(ðŸŽ›rectangularData)
            â“¤d?.set(â““ata, forKey: "Rectangular")
            â““ata = try JSONEncoder().encode(ðŸŽ›circularData)
            â“¤d?.set(â““ata, forKey: "Circular")
            â““ata = try JSONEncoder().encode(ðŸŽ›inlineData)
            â“¤d?.set(â““ata, forKey: "Inline")
        } catch {
            print("ðŸš¨Encode error: ", error)
        }
        WidgetCenter.shared.reloadAllTimelines()
    }
    
    func ðŸ’¾loadDatas() {
        let â“¤d = UserDefaults(suiteName: ðŸ†”AppGroupID)
        do {
            if let â““ata = â“¤d?.data(forKey: "Rectangular") {
                ðŸŽ›rectangularData = try JSONDecoder().decode(ðŸŽ›RectangularDataModel.self, from: â““ata)
            } else { print(#"UserDefaults(suiteName: ðŸ†”AppGroupID).data(forKey: "Rectangular")"#, "is nil.") }
            if let â““ata = â“¤d?.data(forKey: "Circular") {
                ðŸŽ›circularData = try JSONDecoder().decode(ðŸŽ›CircularDataModel.self, from: â““ata)
            } else { print(#"UserDefaults(suiteName: ðŸ†”AppGroupID).data(forKey: "Circular")"#, "is nil.") }
            if let â““ata = â“¤d?.data(forKey: "Inline") {
                ðŸŽ›inlineData = try JSONDecoder().decode(ðŸŽ›InlineDataModel.self, from: â““ata)
            } else { print(#"UserDefaults(suiteName: ðŸ†”AppGroupID).data(forKey: "Inline")"#, "is nil.") }
        } catch {
            print("ðŸš¨Decode error: ", error)
        }
    }
    
    init() {
        ðŸ’¾loadDatas()
    }
}

let ðŸ†”AppGroupID = "group.net.aaaakkkkssssttttnnnn.LockInNote"

struct ðŸŽ›RectangularDataModel: Codable, Equatable {
    var text: String = ""
    
    var placeholder: ðŸ„¿laceholder = .squareAndPencil
    var fontSize: Int = 17
    var fontWeight: ðŸ…†eight = .regular
    var fontDesign: ðŸ„³esign = .default
    var italic: Bool = false
    var level: ðŸ„»evel = .primary
    var multilineTextAlignment: ðŸ„¼ultilineTextAlignment = .center
}

struct ðŸŽ›CircularDataModel: Codable, Equatable {
    var text: String = ""
    var background: Bool = true
    
    var placeholder: ðŸ„¿laceholder = .squareAndPencil
    var fontSize: Int = 13
    var fontWeight: ðŸ…†eight = .regular
    var fontDesign: ðŸ„³esign = .default
    var italic: Bool = false
    var level: ðŸ„»evel = .primary
    var multilineTextAlignment: ðŸ„¼ultilineTextAlignment = .center
}

struct ðŸŽ›InlineDataModel: Codable, Equatable {
    var text: String = ""
    var placeholder: ðŸ„¿laceholder = .squareAndPencil
}

enum ðŸ„¿laceholder: String, Codable, CaseIterable, Identifiable {
    case squareAndPencil = "square and pencil"
    case ellipsis, pencil
    case nothing = "(nothing)"
    var id: Self { self }
    var icon: String {
        switch self {
            case .squareAndPencil: return "square.and.pencil"
            case .ellipsis: return "ellipsis"
            case .pencil: return "pencil"
            case .nothing: return "questionmark.square.dashed"
        }
    }
}

enum ðŸ…†eight: String, Codable, CaseIterable, Identifiable {
    case ultraLight, thin, light, regular, medium, semibold, bold, heavy, black
    var id: Self { self }
    var value: Font.Weight {
        switch self {
            case .ultraLight: return .ultraLight
            case .thin: return .thin
            case .light: return .light
            case .regular: return .regular
            case .medium: return .medium
            case .semibold: return .semibold
            case .bold: return .bold
            case .heavy: return .heavy
            case .black: return .black
        }
    }
}

enum ðŸ„³esign: String, Codable, CaseIterable, Identifiable {
    case `default`, serif, rounded, monospaced
    var id: Self { self }
    var value: Font.Design {
        switch self {
            case .default: return .default
            case .serif: return .serif
            case .rounded: return .rounded
            case .monospaced: return .monospaced
        }
    }
}

enum ðŸ„»evel: String, Codable, CaseIterable, Identifiable {
    case primary, secondary, tertiary, quaternary
    var id: Self { self }
    var value: HierarchicalShapeStyle {
        switch self {
            case .primary: return .primary
            case .secondary: return .secondary
            case .tertiary: return .tertiary
            case .quaternary: return .quaternary
        }
    }
}

enum ðŸ„¼ultilineTextAlignment: String, Codable, CaseIterable, Identifiable {
    case leading, center, trailing
    var id: Self { self }
    var value: TextAlignment {
        switch self {
            case .leading: return .leading
            case .center: return .center
            case .trailing: return .trailing
        }
    }
    var icon: String {
        switch self {
            case .leading: return "text.justify.leading"
            case .center: return "text.aligncenter"
            case .trailing: return "text.justify.trailing"
        }
    }
}
