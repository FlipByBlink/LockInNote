
import SwiftUI
import WidgetKit

struct ContentView: View {
    @EnvironmentObject var üì±: üì±AppModel
    @Environment(\.scenePhase) var ‚ìühase: ScenePhase
    @State private var üîñTab: üîñTabTag = .inlineWidget
    
    var body: some View {
        TabView(selection: $üîñTab) {
            üìùInlineWidgetTab()
                .tag(üîñTabTag.inlineWidget)
                .tabItem { Label("Inline", systemImage: "textformat.abc") }
            Text("Rectangular")
                .tag(üîñTabTag.rectangularWidget)
                .tabItem { Label("Rectangular", systemImage: "rectangle.dashed") }
            Text("Circular")
                .tag(üîñTabTag.circularWidget)
                .tabItem { Label("Circular", systemImage: "circle.dashed") }
            üî©OptionTab()
                .tag(üîñTabTag.option)
                .tabItem { Label("Option", systemImage: "gearshape") }
            ‚ÑπÔ∏èAboutAppTab()
                .tag(üîñTabTag.about)
                .tabItem { Label("About App", systemImage: "questionmark") }
        }
        .onChange(of: ‚ìühase) { üÜï in
            print(‚ìühase,"->",üÜï)
        }
        .onOpenURL { üîó in
            if let ‚ì•alue = Int(üîó.description) {
                switch WidgetFamily(rawValue: ‚ì•alue) {
                    case .accessoryInline: üîñTab = .inlineWidget
                    case .accessoryRectangular: üîñTab = .rectangularWidget
                    case .accessoryCircular: üîñTab = .circularWidget
                    default: break
                }
            }
        }
    }
    
    enum üîñTabTag {
        case inlineWidget, rectangularWidget, circularWidget, option, about
    }
}

struct üìùInlineWidgetTab: View {
    @EnvironmentObject var üì±: üì±AppModel
    var body: some View {
        NavigationStack {
            if let index = üì±.‚ì¶idgetsData.firstIndex(where: { $0.id == .inline }) {
                List {
                    Section {
                        TextField("note text", text: $üì±.‚ì¶idgetsData[index].text)
                            .font(.title3)
                            .textFieldStyle(.roundedBorder)
                            .scrollDismissesKeyboard(.immediately)
                            .onSubmit {
                                üì±.üíæSaveDatas()
                                WidgetCenter.shared.reloadAllTimelines()
                            }
                        NavigationLink {
                            Text(üì±.‚ì¶idgetsData[index].family.rawValue)
                        } label: {
                            Label("Customize", systemImage: "slider.horizontal.3")
                                .font(.caption)
                        }
                    }
                }
                .navigationTitle("Inline widget")
            } else {
                Text("üêõBug")
            }
        }
    }
}


struct üî©OptionTab: View {
    @EnvironmentObject var üì±: üì±AppModel
    
    var body: some View {
        NavigationStack {
            List {
                Toggle(isOn: $üì±.üö©AutoLaunchKeyboard) {
                    Label("Auto keyboard launch", systemImage: "keyboard")
                }
                
                üì£ADMenuLink()
            }
            .navigationTitle("Option")
        }
    }
}


//struct üéöLevelPicker: View {
//    @EnvironmentObject var üì±: üì±AppModel
//    @State private var üéöLevel: üÑªevelEnum = .primary
//
//    var body: some View {
//        NavigationLink {
//            List {
//                Picker("", selection: $üéöLevel) {
//                    ForEach(üÑªevelEnum.allCases) { level in
//                        HStack {
//                            Text("Level")
//                                .padding(8)
//                                .foregroundStyle(‚ì¢hape(level))
//                            if level == .primary {
//                                Text("(default)")
//                                    .foregroundStyle(.secondary)
//                                    .font(.caption)
//                            }
//                        }
//                    }
//                }
//                .pickerStyle(.inline)
//            }
//        } label: {
//            HStack {
//                ForEach(üÑªevelEnum.allCases) { level in
//                    Text("Aa")
//                        .foregroundStyle(‚ì¢hape(level))
//                        .underline(üéöLevel == level)
//                }
//            }
//        }
//    }
//
//    func ‚ì¢hape(_ level: üÑªevelEnum) -> HierarchicalShapeStyle {
//        switch level {
//            case .primary: return .primary
//            case .secondary: return .secondary
//            case .tertiary: return .tertiary
//            case .quaternary: return .quaternary
//        }
//    }
//}







struct ‚ÑπÔ∏èAboutAppTab: View {
    var body: some View {
        NavigationView {
            List {
                Section {
                    ZStack {
                        Color.clear
                        VStack(spacing: 12) {
                            Image("ClipedIcon")
                                .resizable()
                                .shadow(radius: 4, y: 1)
                                .frame(width: 100, height: 100)
                            VStack(spacing: 6) {
                                Text("LockInNote")
                                    .font(.system(.title2, design: .rounded))
                                    .fontWeight(.bold)
                                    .tracking(1.5)
                                    .opacity(0.75)
                                    .lineLimit(1)
                                    .minimumScaleFactor(0.1)
                                Text("Application for iPhone")
                                    .font(.footnote)
                                    .fontWeight(.medium)
                                    .foregroundStyle(.secondary)
                            }
                            .lineLimit(1)
                            .minimumScaleFactor(0.1)
                        }
                        .padding(48)
                    }
                }
                
                Section {
                    Link(destination: üîóAppStoreProductURL) {
                        HStack {
                            Label("Open AppStore page", systemImage: "link")
                            Spacer()
                            Image(systemName: "arrow.up.forward.app")
                                .imageScale(.small)
                                .foregroundStyle(.secondary)
                        }
                    }
                    
                    NavigationLink  {
                        ‚ÑπÔ∏èAboutAppMenu()
                    } label: {
                        Label("About App", systemImage: "doc")
                    }
                }
            }
            .navigationBarTitleDisplayMode(.inline)
        }
        .navigationViewStyle(StackNavigationViewStyle())
    }
}




struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
