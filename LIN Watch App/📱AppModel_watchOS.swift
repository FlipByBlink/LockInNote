import SwiftUI
import WidgetKit
import WatchConnectivity

@MainActor
class ðŸ“±AppModel: NSObject, ObservableObject {
    @Published var widgetsModel = ðŸŽ›WidgetsModel()
    
    @Published var â“£asks: Set<WKRefreshBackgroundTask> = []
    
    func saveAndReloadWidgetAndUpdateWCContext() {
        self.widgetsModel.save()
        WidgetCenter.shared.reloadAllTimelines()
        self.widgetsModel.updateWCContext()
    }
    
    func applyReceivedWCContext(_ â“’ontext: [String: Any]) {
        Task { @MainActor in
            self.widgetsModel.receiveWCContext(â“’ontext)
            WidgetCenter.shared.reloadAllTimelines()
            self.â“£asks.forEach { $0.setTaskCompletedWithSnapshot(false) }
        }
    }
}

extension ðŸ“±AppModel: WKApplicationDelegate {
    func applicationDidFinishLaunching() {
        if WCSession.isSupported() {
            WCSession.default.delegate = self
            WCSession.default.activate()
        }
    }
    func handle(_ backgroundTasks: Set<WKRefreshBackgroundTask>) {
        self.â“£asks.forEach { â“£ask in
            switch â“£ask {
                case let â“¦atchConnectivityTask as WKWatchConnectivityRefreshBackgroundTask:
                    self.â“£asks.insert(â“¦atchConnectivityTask)
                default:
                    â“£ask.setTaskCompletedWithSnapshot(false)
            }
        }
    }
}

extension ðŸ“±AppModel: WCSessionDelegate {
    //Required
    func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
        self.applyReceivedWCContext(session.receivedApplicationContext)
    }
    //Optional
    func session(_ session: WCSession, didReceiveApplicationContext applicationContext: [String : Any]) {
        self.applyReceivedWCContext(applicationContext)
    }
}
